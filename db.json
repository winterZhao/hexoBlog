{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/hexadillax/source/favicon.ico","path":"favicon.ico","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/css/style.styl","path":"css/style.styl","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/images/avatar.gif","path":"images/avatar.gif","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/js/common.js","path":"js/common.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/js/headroom.min.js","path":"js/headroom.min.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/js/jquery.backstretch.min.js","path":"js/jquery.backstretch.min.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/js/jquery.headroom.min.js","path":"js/jquery.headroom.min.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/js/jquery-2.1.0.min.js","path":"js/jquery-2.1.0.min.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/js/jquery-2.1.0.min.map","path":"js/jquery-2.1.0.min.map","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap-theme.css","path":"bootstrap/css/bootstrap-theme.css","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap-theme.css.map","path":"bootstrap/css/bootstrap-theme.css.map","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap-theme.min.css","path":"bootstrap/css/bootstrap-theme.min.css","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.eot","path":"bootstrap/fonts/glyphicons-halflings-regular.eot","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.ttf","path":"bootstrap/fonts/glyphicons-halflings-regular.ttf","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.woff","path":"bootstrap/fonts/glyphicons-halflings-regular.woff","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/js/bootstrap.js","path":"bootstrap/js/bootstrap.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/js/bootstrap.min.js","path":"bootstrap/js/bootstrap.min.js","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/css/font/josefinsans-regular-webfont.woff","path":"css/font/josefinsans-regular-webfont.woff","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.svg","path":"bootstrap/fonts/glyphicons-halflings-regular.svg","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap.css","path":"bootstrap/css/bootstrap.css","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap.min.css","path":"bootstrap/css/bootstrap.min.css","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/images/background/3.jpg","path":"images/background/3.jpg","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap.css.map","path":"bootstrap/css/bootstrap.css.map","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/images/background/1.jpg","path":"images/background/1.jpg","modified":1,"renderable":1},{"_id":"themes/hexadillax/source/images/background/2.jpg","path":"images/background/2.jpg","modified":1,"renderable":1}],"Cache":[{"_id":"themes/hexadillax/.gitignore","hash":"6b1b02846bfe7563cc9b479683bfdfeffa4bbffd","modified":1460966458104},{"_id":"themes/hexadillax/README.md","hash":"4e5e819534574b808e19c78c3f698927961c49e0","modified":1460966458104},{"_id":"themes/hexadillax/LICENSE","hash":"270f5a1ac927ae23fa80e44360a5a6641a4d9ac2","modified":1460966458104},{"_id":"themes/hexadillax/_config.sample.yml","hash":"da3e126863dd8cb7ef74d6503052ad508c187481","modified":1461033101357},{"_id":"source/_posts/JavaScript的异步和单线程.md","hash":"4c923b4a974802713f261545be7d3accbaf8cefc","modified":1461057129070},{"_id":"source/_posts/Socket-io发送消息含义.md","hash":"12bed876167e492d2af7a6b90aac207aa574f43c","modified":1461060361354},{"_id":"source/_posts/Socket的前端实现.md","hash":"be20d96cfa0847e1f85330550f2491dcbe741d1b","modified":1461058414241},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1460963094022},{"_id":"source/categories/index.md","hash":"f6b05f97bed3a2acfbe0287536d3902991748c58","modified":1460968156784},{"_id":"source/tags/index.md","hash":"e3e2306d573dfd7972ea620a3f367eb7762e4393","modified":1460968156780},{"_id":"themes/hexadillax/source/favicon.ico","hash":"2e6e36eb6d01013b7b656e85ae383d3bb41d6361","modified":1461031153339},{"_id":"themes/hexadillax/layout/archive.ejs","hash":"4d065ae11bc7fc076e52bca5238dfaf90cad8d5a","modified":1460966458104},{"_id":"themes/hexadillax/layout/categories.ejs","hash":"471522c4d0f0390bd9162f21e38dc23542cfc91f","modified":1460966458104},{"_id":"themes/hexadillax/layout/category.ejs","hash":"0f5bfbee0dc4e0510fe96d7a7b4fa70dfbfa4993","modified":1460966458104},{"_id":"themes/hexadillax/layout/index.ejs","hash":"24ffecd3157daa29967c2c03dd1261d8512ec78d","modified":1460966458104},{"_id":"themes/hexadillax/layout/layout.ejs","hash":"e6d9bde45018eb0b3cc9e470bf6fce5f8125b9ac","modified":1460966458104},{"_id":"themes/hexadillax/layout/page.ejs","hash":"b6bf26508ba1bb56aee50dd94dd6274a0c459337","modified":1460966458104},{"_id":"themes/hexadillax/layout/post.ejs","hash":"b19255c0bd9854fe36167920196fcceb29aa5a41","modified":1460966458104},{"_id":"themes/hexadillax/layout/tags.ejs","hash":"71cbecb914deee7fa2eb02a74b490d56dd50312c","modified":1460966458104},{"_id":"themes/hexadillax/layout/tag.ejs","hash":"87927a704f02701106cf4dec5041a4b90274afca","modified":1460966458104},{"_id":"themes/hexadillax/source/css/style.styl","hash":"4e10fef8ffd262368875b7555f31ac40448baf5b","modified":1460966458105},{"_id":"themes/hexadillax/source/images/avatar.gif","hash":"628c42dcc57f065258d996bfc5ab567f873c95be","modified":1460974682303},{"_id":"themes/hexadillax/source/js/common.js","hash":"c072259becda7fbc7463410344fa2ceacfe05107","modified":1460966458122},{"_id":"themes/hexadillax/source/js/headroom.min.js","hash":"f303be7aeab5a57e894d116c8a124dadb6a265b0","modified":1460966458123},{"_id":"themes/hexadillax/source/js/jquery.backstretch.min.js","hash":"48535cc9f9abfa5edb898efb82d2d8fb8c8ad475","modified":1460966458125},{"_id":"themes/hexadillax/source/js/jquery.headroom.min.js","hash":"719ce1021d272583c8b7aa9f1776d271ef4f6b50","modified":1460966458125},{"_id":"themes/hexadillax/layout/_partial/baidu-analytics.ejs","hash":"9dcc8bf61dc4b803ecf6ff35593417729158e620","modified":1460966458104},{"_id":"themes/hexadillax/layout/_partial/comment.ejs","hash":"970aedbcacb78e6d4454fb626c64c426c500073d","modified":1460966458104},{"_id":"themes/hexadillax/layout/_partial/header.ejs","hash":"0da81e98782d832cc1e9dd98e67f78119276dead","modified":1461059604638},{"_id":"themes/hexadillax/layout/_partial/footer.ejs","hash":"2b9fb3b9cf4a81d25ccb5d01ff09108d5bec3bb4","modified":1460966458104},{"_id":"themes/hexadillax/layout/_partial/mathjax.ejs","hash":"8163c8e8c543bb52a891ac342f62f6c767a3ce85","modified":1460966458104},{"_id":"themes/hexadillax/source/js/jquery-2.1.0.min.js","hash":"bee4d9cd41ae6bf4f72b1f48be0935d807ec26b0","modified":1460966458123},{"_id":"themes/hexadillax/source/js/jquery-2.1.0.min.map","hash":"4fda7e40d008f468d9d2c9b209db864eb0c8267f","modified":1460966458124},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap-theme.css","hash":"8a9e5916d7855842b492805d437974bb771c2a71","modified":1460966458104},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap-theme.css.map","hash":"c821cd7a77889f3908720525b76c7212579cc586","modified":1460966458104},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap-theme.min.css","hash":"e886fa5f4df2d269ccf3ae2418db82f6ae943fc5","modified":1460966458104},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.eot","hash":"f3a9a3b609133c3d21d6b42abbf7f43bd111df72","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.ttf","hash":"aafafdc09404c4aa4447d7e898a2183def9cc1b1","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.woff","hash":"22037a3455914e5662fa51a596677bdb329e2c5c","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/js/bootstrap.js","hash":"93d7f31e5f733516785f23efbc16578cafa992ed","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/js/bootstrap.min.js","hash":"9933cdc70c0047a3ea1a196f9320c36737b93c2a","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_base/code.styl","hash":"577798b3c101be20b7ceb3d1e0421b4c4426d0ce","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_base/base.styl","hash":"0e3298d61aeb896ac8af7255faf3ee1ef32da8b0","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_base/var.styl","hash":"e7e62c8dd36b63ba3b389ca895c496d47cc7dc6a","modified":1460966458105},{"_id":"themes/hexadillax/source/css/font/josefinsans-regular-webfont.woff","hash":"c9217b0e6c002dd1198829d300b6f90af21b79e8","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_partial/foot.styl","hash":"9c514fb951f546983674b6e23763174a1cd6896d","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_partial/archive.styl","hash":"61f6b434b141ba816de715b97fb110da5d370ec1","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_partial/head.styl","hash":"603baa3e09fcdeeedf108b5bf011a5fcb2f73f77","modified":1460966458105},{"_id":"themes/hexadillax/source/css/_partial/post.styl","hash":"c8cfa3d301c71cc689c56852f6a7cf5c770a3ea0","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/fonts/glyphicons-halflings-regular.svg","hash":"acae87fd5e19683ab77521b0a71552083ca64003","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap.css","hash":"59c99b8ef69ae7651d30452e73117eb9a0f4667e","modified":1460966458105},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap.min.css","hash":"982ae62dd615afce29484a58df2eb7072ac1c141","modified":1460966458105},{"_id":"themes/hexadillax/source/images/background/3.jpg","hash":"fa7d35cabb8976f94388b8d5bb0188f903ef4b42","modified":1461028480539},{"_id":"themes/hexadillax/source/bootstrap/css/bootstrap.css.map","hash":"60a807eb6ed5d9c866c83c659f257f7c56970a24","modified":1460966458105},{"_id":"themes/hexadillax/source/images/background/1.jpg","hash":"524e36d9ba61b00c8142a93b9ecca61514cefca2","modified":1461028397386},{"_id":"themes/hexadillax/source/images/background/2.jpg","hash":"aba0155598df1e3691cdb7eaa27a6115da2c37c8","modified":1461028429999}],"Category":[],"Data":[],"Page":[{"layout":"categories","title":"categories","_content":"","source":"categories/index.md","raw":"layout: categories\ntitle: categories\n---","date":"2016-04-19T10:27:53.179Z","updated":"2016-04-18T08:29:16.784Z","path":"categories/index.html","comments":1,"_id":"cin7af7z10001rwrqfjqd23mx","content":"","excerpt":"","more":""},{"layout":"tags","title":"tags","_content":"","source":"tags/index.md","raw":"layout: tags\ntitle:  tags\n---","date":"2016-04-19T10:27:53.180Z","updated":"2016-04-18T08:29:16.780Z","path":"tags/index.html","comments":1,"_id":"cin7af7zh0009rwrqqwn5viqw","content":"","excerpt":"","more":""}],"Post":[{"title":"JavaScript的异步和单线程","date":"2016-04-19T09:10:03.000Z","_content":"\n最近，同事之间做技术分享的时候提到了一个问题“js的异步是另开一个线程吗？”当时为此争论不休。会后自己查阅了一些资料，对这个问题进行一个自我的分析与总结，有不同意见的希望可以赐教，谢谢！\n\n　　js的异步主要有三部分:定时器setTimeout/setInterval;HTTP请求;事件响应。\n\n对于定时器setTimeout/setInterval的异步问题，高程上《高级定时器》(P609)是这样解释的:\n\n\n>   除了主JavaScript执行进程外，还需要一个在进程下一次空闲时执行的代码队列。随着页面生命周期推移，代码会按照执行顺序添加入队列，例如当按 钮被按下的时候他的事件处理程序会被添加到队列中，并在下一个可能时间内执行。在接到某个Ajax响应时，回调函数的代码会被添加到队列。JavaScript中没有任何代码是立即执行的，但一旦进程空闲则尽快执行。定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。\n    定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。定时器对队列的工作方式是，当特定的时间过去后，将代码插入，注意添加到队列并不意味着它会马上执行，而只能说它会尽快执行，设定一个150ms后执行的定时器，不代表150ms后它会马上执行，它只会表示在150ms后被加入到队列中，如果这个时间点队列是空闲的，那么这段代码就会被执行;其他情况下,代码可能明显地等待更长时间才执行。\n\n\n#### 总结:\n\n 1. Javascript引擎解析是一个单线程的过程,浏览器无论在任何时候有且只有一个线程在运行Javascript程序;\n\n 2. 浏览器是多线程的,这些线程在内核控制下相互配合以保持同步。在处理js的异步上浏览器内核的实现可能有多个进程:Javascript引擎线程、界面渲染线程、浏览器事件触发线程、HTTP请求线程…… **补充** : 这些线程的名字为渲染引擎、网络、js解析器等 参考自 [前端必读：浏览器内部工作原理](http://kb.cnblogs.com/page/129756/)\n 3. Javascript除了一个主线程外,还配有一个代码队列,这个队列用以存放定时器、HTTP请求、事件响应的回调。\n\n\n\n#### 所以我对这个流程的理解是这样的:\n　　Javascript代码自上而下执行的，当执行到定时器、或者发送HTTP请求、或者发生用户交互事件响应时，会自动触发对应事件(HTTP请求、事件响应),将回调函数储存到队列中。Javascript执行完主线程代码后，会去执行任务队列，队列内这个时间点是否有代码要执行；如果有，则执行队列中的代码。\n\n\n#### 进一步理解——对队列:\n\n　　有细心的会发现,上面的理解没有加入\"定时器\",我对此的进一步理解:  有一个现象,Javascript里提供了`console.time(name)`和`console.timeEnd(name)`可以打印出一段代码的执行时间。由此，我感觉Javascript每一段代码的执行都会有记录一个时间。Javascript会根据这个时间来安排队列．\n\n　　当代码执行到用户交互事件时,会传入回调给队列,该回调的时间就是事件触发的时间;当代码执行到定时器的时候，传入队列的回调函数的时间是定时器触发的时间加上延迟;而HTTP请求传递给队列的回调函数的时间则是其取得数据的时间(我感觉中间可能穿插了一个`readyState==4`时会重新传入一个时间,或者可以直接抛去时间，做if判断，判断状态是4时执行);这样可以根据时间对队列进行进一步排序，形成一个自上而下的队列!","source":"_posts/JavaScript的异步和单线程.md","raw":"---\ntitle: 'JavaScript的异步和单线程'\ndate: 2016-04-19 17:10:03\ntags: JavaScript\n---\n\n最近，同事之间做技术分享的时候提到了一个问题“js的异步是另开一个线程吗？”当时为此争论不休。会后自己查阅了一些资料，对这个问题进行一个自我的分析与总结，有不同意见的希望可以赐教，谢谢！\n\n　　js的异步主要有三部分:定时器setTimeout/setInterval;HTTP请求;事件响应。\n\n对于定时器setTimeout/setInterval的异步问题，高程上《高级定时器》(P609)是这样解释的:\n\n\n>   除了主JavaScript执行进程外，还需要一个在进程下一次空闲时执行的代码队列。随着页面生命周期推移，代码会按照执行顺序添加入队列，例如当按 钮被按下的时候他的事件处理程序会被添加到队列中，并在下一个可能时间内执行。在接到某个Ajax响应时，回调函数的代码会被添加到队列。JavaScript中没有任何代码是立即执行的，但一旦进程空闲则尽快执行。定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。\n    定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。定时器对队列的工作方式是，当特定的时间过去后，将代码插入，注意添加到队列并不意味着它会马上执行，而只能说它会尽快执行，设定一个150ms后执行的定时器，不代表150ms后它会马上执行，它只会表示在150ms后被加入到队列中，如果这个时间点队列是空闲的，那么这段代码就会被执行;其他情况下,代码可能明显地等待更长时间才执行。\n\n\n#### 总结:\n\n 1. Javascript引擎解析是一个单线程的过程,浏览器无论在任何时候有且只有一个线程在运行Javascript程序;\n\n 2. 浏览器是多线程的,这些线程在内核控制下相互配合以保持同步。在处理js的异步上浏览器内核的实现可能有多个进程:Javascript引擎线程、界面渲染线程、浏览器事件触发线程、HTTP请求线程…… **补充** : 这些线程的名字为渲染引擎、网络、js解析器等 参考自 [前端必读：浏览器内部工作原理](http://kb.cnblogs.com/page/129756/)\n 3. Javascript除了一个主线程外,还配有一个代码队列,这个队列用以存放定时器、HTTP请求、事件响应的回调。\n\n\n\n#### 所以我对这个流程的理解是这样的:\n　　Javascript代码自上而下执行的，当执行到定时器、或者发送HTTP请求、或者发生用户交互事件响应时，会自动触发对应事件(HTTP请求、事件响应),将回调函数储存到队列中。Javascript执行完主线程代码后，会去执行任务队列，队列内这个时间点是否有代码要执行；如果有，则执行队列中的代码。\n\n\n#### 进一步理解——对队列:\n\n　　有细心的会发现,上面的理解没有加入\"定时器\",我对此的进一步理解:  有一个现象,Javascript里提供了`console.time(name)`和`console.timeEnd(name)`可以打印出一段代码的执行时间。由此，我感觉Javascript每一段代码的执行都会有记录一个时间。Javascript会根据这个时间来安排队列．\n\n　　当代码执行到用户交互事件时,会传入回调给队列,该回调的时间就是事件触发的时间;当代码执行到定时器的时候，传入队列的回调函数的时间是定时器触发的时间加上延迟;而HTTP请求传递给队列的回调函数的时间则是其取得数据的时间(我感觉中间可能穿插了一个`readyState==4`时会重新传入一个时间,或者可以直接抛去时间，做if判断，判断状态是4时执行);这样可以根据时间对队列进行进一步排序，形成一个自上而下的队列!","slug":"JavaScript的异步和单线程","published":1,"updated":"2016-04-19T09:12:09.070Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin7af7yl0000rwrqz80nn18e","content":"<p>最近，同事之间做技术分享的时候提到了一个问题“js的异步是另开一个线程吗？”当时为此争论不休。会后自己查阅了一些资料，对这个问题进行一个自我的分析与总结，有不同意见的希望可以赐教，谢谢！</p>\n<p>　　js的异步主要有三部分:定时器setTimeout/setInterval;HTTP请求;事件响应。</p>\n<p>对于定时器setTimeout/setInterval的异步问题，高程上《高级定时器》(P609)是这样解释的:</p>\n<blockquote>\n<p>  除了主JavaScript执行进程外，还需要一个在进程下一次空闲时执行的代码队列。随着页面生命周期推移，代码会按照执行顺序添加入队列，例如当按 钮被按下的时候他的事件处理程序会被添加到队列中，并在下一个可能时间内执行。在接到某个Ajax响应时，回调函数的代码会被添加到队列。JavaScript中没有任何代码是立即执行的，但一旦进程空闲则尽快执行。定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。<br>    定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。定时器对队列的工作方式是，当特定的时间过去后，将代码插入，注意添加到队列并不意味着它会马上执行，而只能说它会尽快执行，设定一个150ms后执行的定时器，不代表150ms后它会马上执行，它只会表示在150ms后被加入到队列中，如果这个时间点队列是空闲的，那么这段代码就会被执行;其他情况下,代码可能明显地等待更长时间才执行。</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h4><ol>\n<li><p>Javascript引擎解析是一个单线程的过程,浏览器无论在任何时候有且只有一个线程在运行Javascript程序;</p>\n</li>\n<li><p>浏览器是多线程的,这些线程在内核控制下相互配合以保持同步。在处理js的异步上浏览器内核的实现可能有多个进程:Javascript引擎线程、界面渲染线程、浏览器事件触发线程、HTTP请求线程…… <strong>补充</strong> : 这些线程的名字为渲染引擎、网络、js解析器等 参考自 <a href=\"http://kb.cnblogs.com/page/129756/\" target=\"_blank\" rel=\"external\">前端必读：浏览器内部工作原理</a></p>\n</li>\n<li>Javascript除了一个主线程外,还配有一个代码队列,这个队列用以存放定时器、HTTP请求、事件响应的回调。</li>\n</ol>\n<h4 id=\"所以我对这个流程的理解是这样的\"><a href=\"#所以我对这个流程的理解是这样的\" class=\"headerlink\" title=\"所以我对这个流程的理解是这样的:\"></a>所以我对这个流程的理解是这样的:</h4><p>　　Javascript代码自上而下执行的，当执行到定时器、或者发送HTTP请求、或者发生用户交互事件响应时，会自动触发对应事件(HTTP请求、事件响应),将回调函数储存到队列中。Javascript执行完主线程代码后，会去执行任务队列，队列内这个时间点是否有代码要执行；如果有，则执行队列中的代码。</p>\n<h4 id=\"进一步理解——对队列\"><a href=\"#进一步理解——对队列\" class=\"headerlink\" title=\"进一步理解——对队列:\"></a>进一步理解——对队列:</h4><p>　　有细心的会发现,上面的理解没有加入”定时器”,我对此的进一步理解:  有一个现象,Javascript里提供了<code>console.time(name)</code>和<code>console.timeEnd(name)</code>可以打印出一段代码的执行时间。由此，我感觉Javascript每一段代码的执行都会有记录一个时间。Javascript会根据这个时间来安排队列．</p>\n<p>　　当代码执行到用户交互事件时,会传入回调给队列,该回调的时间就是事件触发的时间;当代码执行到定时器的时候，传入队列的回调函数的时间是定时器触发的时间加上延迟;而HTTP请求传递给队列的回调函数的时间则是其取得数据的时间(我感觉中间可能穿插了一个<code>readyState==4</code>时会重新传入一个时间,或者可以直接抛去时间，做if判断，判断状态是4时执行);这样可以根据时间对队列进行进一步排序，形成一个自上而下的队列!</p>\n","excerpt":"","more":"<p>最近，同事之间做技术分享的时候提到了一个问题“js的异步是另开一个线程吗？”当时为此争论不休。会后自己查阅了一些资料，对这个问题进行一个自我的分析与总结，有不同意见的希望可以赐教，谢谢！</p>\n<p>　　js的异步主要有三部分:定时器setTimeout/setInterval;HTTP请求;事件响应。</p>\n<p>对于定时器setTimeout/setInterval的异步问题，高程上《高级定时器》(P609)是这样解释的:</p>\n<blockquote>\n<p>  除了主JavaScript执行进程外，还需要一个在进程下一次空闲时执行的代码队列。随着页面生命周期推移，代码会按照执行顺序添加入队列，例如当按 钮被按下的时候他的事件处理程序会被添加到队列中，并在下一个可能时间内执行。在接到某个Ajax响应时，回调函数的代码会被添加到队列。JavaScript中没有任何代码是立即执行的，但一旦进程空闲则尽快执行。定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。<br>    定时器对队列的工作方式是当特定时间过去后将代码插入，这并不意味着它会马上执行，只能表示它尽快执行。定时器对队列的工作方式是，当特定的时间过去后，将代码插入，注意添加到队列并不意味着它会马上执行，而只能说它会尽快执行，设定一个150ms后执行的定时器，不代表150ms后它会马上执行，它只会表示在150ms后被加入到队列中，如果这个时间点队列是空闲的，那么这段代码就会被执行;其他情况下,代码可能明显地等待更长时间才执行。</p>\n</blockquote>\n<h4 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结:\"></a>总结:</h4><ol>\n<li><p>Javascript引擎解析是一个单线程的过程,浏览器无论在任何时候有且只有一个线程在运行Javascript程序;</p>\n</li>\n<li><p>浏览器是多线程的,这些线程在内核控制下相互配合以保持同步。在处理js的异步上浏览器内核的实现可能有多个进程:Javascript引擎线程、界面渲染线程、浏览器事件触发线程、HTTP请求线程…… <strong>补充</strong> : 这些线程的名字为渲染引擎、网络、js解析器等 参考自 <a href=\"http://kb.cnblogs.com/page/129756/\">前端必读：浏览器内部工作原理</a></p>\n</li>\n<li>Javascript除了一个主线程外,还配有一个代码队列,这个队列用以存放定时器、HTTP请求、事件响应的回调。</li>\n</ol>\n<h4 id=\"所以我对这个流程的理解是这样的\"><a href=\"#所以我对这个流程的理解是这样的\" class=\"headerlink\" title=\"所以我对这个流程的理解是这样的:\"></a>所以我对这个流程的理解是这样的:</h4><p>　　Javascript代码自上而下执行的，当执行到定时器、或者发送HTTP请求、或者发生用户交互事件响应时，会自动触发对应事件(HTTP请求、事件响应),将回调函数储存到队列中。Javascript执行完主线程代码后，会去执行任务队列，队列内这个时间点是否有代码要执行；如果有，则执行队列中的代码。</p>\n<h4 id=\"进一步理解——对队列\"><a href=\"#进一步理解——对队列\" class=\"headerlink\" title=\"进一步理解——对队列:\"></a>进一步理解——对队列:</h4><p>　　有细心的会发现,上面的理解没有加入”定时器”,我对此的进一步理解:  有一个现象,Javascript里提供了<code>console.time(name)</code>和<code>console.timeEnd(name)</code>可以打印出一段代码的执行时间。由此，我感觉Javascript每一段代码的执行都会有记录一个时间。Javascript会根据这个时间来安排队列．</p>\n<p>　　当代码执行到用户交互事件时,会传入回调给队列,该回调的时间就是事件触发的时间;当代码执行到定时器的时候，传入队列的回调函数的时间是定时器触发的时间加上延迟;而HTTP请求传递给队列的回调函数的时间则是其取得数据的时间(我感觉中间可能穿插了一个<code>readyState==4</code>时会重新传入一个时间,或者可以直接抛去时间，做if判断，判断状态是4时执行);这样可以根据时间对队列进行进一步排序，形成一个自上而下的队列!</p>\n"},{"layout":"轮询、长轮询与web","title":"Socket的前端实现","date":"2016-04-19T09:33:12.000Z","_content":"\n## Web Socket\n  应用场景:实现即时通讯:如股票交易行情分析、聊天室、在线游戏等，替代轮询和长轮询\n\n### 轮询\n> 轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。\n```javascript\nvar xhr = new XMLHttpRequest();\n    setInterval(function(){\n        xhr.open('GET','/user');\n        xhr.onreadystatechange = function(){\n\n        };\n        xhr.send();\n    },1000)\n\n```\n\n### 长轮询:\n   ajax实现:在发送ajax后,服务器端会阻塞请求直到有数据传递或超时才返回。 客户端JavaScript响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。\n```javascript\n\n    function ajax(){\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET','/user');\n        xhr.onreadystatechange = function(){\n              ajax();\n        };\n        xhr.send();\n    }\n\n```\n### Web Socket:\n    轮询与长轮询都是基于HTTP的，两者本身存在着缺陷:轮询需要更快的处理速度；长轮询则更要求处理并发的能力;两者都是“被动型服务器”的体现:服务器不会主动推送信息，而是在客户端发送ajax请求后进行返回的响应。而理想的模型是\"在服务器端数据有了变化后，可以主动推送给客户端\",这种\"主动型\"服务器是解决这类问题的很好的方案。Web Sockets就是这样的方案。\n\n```javascript\n//需要先npm install ws\n\n//服务器端\nvar Server = require('ws').Server;\nvar wss = new Server({\n    port:2000\n});\nwss.on('connection',function(ws){\n    ws.on('message',function(data){\n        ws.send('你好,客户端,我是服务器!');\n        console.log(data);\n    })\n});\n\n//node客户端\n\nvar WebSocket = require('ws');\nvar socket = new WebSocket('ws://localhost:2000/');\nsocket.on('open',function(){\n    socket.send('你好，服务器,我是客户端');\n});\nsocket.on('message',function(event){\n    console.log(event);\n})\n\n//html客户端(注:浏览器客户端与node客户端只需要一种)\n\n<script>\n    var socket = new WebSocket('ws://localhost:2000/');\n    socket.onopen = function(){\n\n    };\n    socket.onmessage = function(event){\n        console.log(event.data)\n    }\n</script>\n\n\n```","source":"_posts/Socket的前端实现.md","raw":"layout: 轮询、长轮询与web\ntitle: Socket的前端实现\ndate: 2016-04-19 17:33:12\ntags: NodeJs\n---\n\n## Web Socket\n  应用场景:实现即时通讯:如股票交易行情分析、聊天室、在线游戏等，替代轮询和长轮询\n\n### 轮询\n> 轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。\n```javascript\nvar xhr = new XMLHttpRequest();\n    setInterval(function(){\n        xhr.open('GET','/user');\n        xhr.onreadystatechange = function(){\n\n        };\n        xhr.send();\n    },1000)\n\n```\n\n### 长轮询:\n   ajax实现:在发送ajax后,服务器端会阻塞请求直到有数据传递或超时才返回。 客户端JavaScript响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。\n```javascript\n\n    function ajax(){\n        var xhr = new XMLHttpRequest();\n        xhr.open('GET','/user');\n        xhr.onreadystatechange = function(){\n              ajax();\n        };\n        xhr.send();\n    }\n\n```\n### Web Socket:\n    轮询与长轮询都是基于HTTP的，两者本身存在着缺陷:轮询需要更快的处理速度；长轮询则更要求处理并发的能力;两者都是“被动型服务器”的体现:服务器不会主动推送信息，而是在客户端发送ajax请求后进行返回的响应。而理想的模型是\"在服务器端数据有了变化后，可以主动推送给客户端\",这种\"主动型\"服务器是解决这类问题的很好的方案。Web Sockets就是这样的方案。\n\n```javascript\n//需要先npm install ws\n\n//服务器端\nvar Server = require('ws').Server;\nvar wss = new Server({\n    port:2000\n});\nwss.on('connection',function(ws){\n    ws.on('message',function(data){\n        ws.send('你好,客户端,我是服务器!');\n        console.log(data);\n    })\n});\n\n//node客户端\n\nvar WebSocket = require('ws');\nvar socket = new WebSocket('ws://localhost:2000/');\nsocket.on('open',function(){\n    socket.send('你好，服务器,我是客户端');\n});\nsocket.on('message',function(event){\n    console.log(event);\n})\n\n//html客户端(注:浏览器客户端与node客户端只需要一种)\n\n<script>\n    var socket = new WebSocket('ws://localhost:2000/');\n    socket.onopen = function(){\n\n    };\n    socket.onmessage = function(event){\n        console.log(event.data)\n    }\n</script>\n\n\n```","slug":"Socket的前端实现","published":1,"updated":"2016-04-19T09:33:34.241Z","comments":1,"photos":[],"link":"","_id":"cin7af7z10002rwrq5ubhvh6p","content":"<h2 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h2><p>  应用场景:实现即时通讯:如股票交易行情分析、聊天室、在线游戏等，替代轮询和长轮询</p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><blockquote>\n<p>轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/user'</span>);</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"长轮询\"><a href=\"#长轮询\" class=\"headerlink\" title=\"长轮询:\"></a>长轮询:</h3><p>   ajax实现:在发送ajax后,服务器端会阻塞请求直到有数据传递或超时才返回。 客户端JavaScript响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/user'</span>);</span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          ajax();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Web-Socket-1\"><a href=\"#Web-Socket-1\" class=\"headerlink\" title=\"Web Socket:\"></a>Web Socket:</h3><pre><code>轮询与长轮询都是基于HTTP的，两者本身存在着缺陷:轮询需要更快的处理速度；长轮询则更要求处理并发的能力;两者都是“被动型服务器”的体现:服务器不会主动推送信息，而是在客户端发送ajax请求后进行返回的响应。而理想的模型是&quot;在服务器端数据有了变化后，可以主动推送给客户端&quot;,这种&quot;主动型&quot;服务器是解决这类问题的很好的方案。Web Sockets就是这样的方案。\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要先npm install ws</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//服务器端</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Server = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>).Server;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wss = <span class=\"keyword\">new</span> Server(&#123;</span><br><span class=\"line\">    port:<span class=\"number\">2000</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">wss.on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ws</span>)</span>&#123;</span><br><span class=\"line\">    ws.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        ws.send(<span class=\"string\">'你好,客户端,我是服务器!'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//node客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> WebSocket = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://localhost:2000/'</span>);</span><br><span class=\"line\">socket.on(<span class=\"string\">'open'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    socket.send(<span class=\"string\">'你好，服务器,我是客户端'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">socket.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//html客户端(注:浏览器客户端与node客户端只需要一种)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://localhost:2000/'</span>);</span><br><span class=\"line\">    socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(event.data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>","excerpt":"","more":"<h2 id=\"Web-Socket\"><a href=\"#Web-Socket\" class=\"headerlink\" title=\"Web Socket\"></a>Web Socket</h2><p>  应用场景:实现即时通讯:如股票交易行情分析、聊天室、在线游戏等，替代轮询和长轮询</p>\n<h3 id=\"轮询\"><a href=\"#轮询\" class=\"headerlink\" title=\"轮询\"></a>轮询</h3><blockquote>\n<p>轮询是在特定的的时间间隔（如每1秒），由浏览器对服务器发出HTTP request，然后由服务器返回最新的数据给客户端的浏览器。这种传统的HTTP request 的模式带来很明显的缺点 – 浏览器需要不断的向服务器发出请求，然而HTTP request 的header是非常长的，里面包含的有用数据可能只是一个很小的值，这样会占用很多的带宽。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    setInterval(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">        xhr.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/user'</span>);</span><br><span class=\"line\">        xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        &#125;;</span><br><span class=\"line\">        xhr.send();</span><br><span class=\"line\">    &#125;,<span class=\"number\">1000</span>)</span><br></pre></td></tr></table></figure></p>\n</blockquote>\n<h3 id=\"长轮询\"><a href=\"#长轮询\" class=\"headerlink\" title=\"长轮询:\"></a>长轮询:</h3><p>   ajax实现:在发送ajax后,服务器端会阻塞请求直到有数据传递或超时才返回。 客户端JavaScript响应处理函数会在处理完服务器返回的信息后，再次发出请求，重新建立连接。<br><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">function</span> <span class=\"title\">ajax</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> xhr = <span class=\"keyword\">new</span> XMLHttpRequest();</span><br><span class=\"line\">    xhr.open(<span class=\"string\">'GET'</span>,<span class=\"string\">'/user'</span>);</span><br><span class=\"line\">    xhr.onreadystatechange = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">          ajax();</span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    xhr.send();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"Web-Socket-1\"><a href=\"#Web-Socket-1\" class=\"headerlink\" title=\"Web Socket:\"></a>Web Socket:</h3><pre><code>轮询与长轮询都是基于HTTP的，两者本身存在着缺陷:轮询需要更快的处理速度；长轮询则更要求处理并发的能力;两者都是“被动型服务器”的体现:服务器不会主动推送信息，而是在客户端发送ajax请求后进行返回的响应。而理想的模型是&quot;在服务器端数据有了变化后，可以主动推送给客户端&quot;,这种&quot;主动型&quot;服务器是解决这类问题的很好的方案。Web Sockets就是这样的方案。\n</code></pre><figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">//需要先npm install ws</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//服务器端</span></span><br><span class=\"line\"><span class=\"keyword\">var</span> Server = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>).Server;</span><br><span class=\"line\"><span class=\"keyword\">var</span> wss = <span class=\"keyword\">new</span> Server(&#123;</span><br><span class=\"line\">    port:<span class=\"number\">2000</span></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">wss.on(<span class=\"string\">'connection'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">ws</span>)</span>&#123;</span><br><span class=\"line\">    ws.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>)</span>&#123;</span><br><span class=\"line\">        ws.send(<span class=\"string\">'你好,客户端,我是服务器!'</span>);</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">    &#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//node客户端</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">var</span> WebSocket = <span class=\"built_in\">require</span>(<span class=\"string\">'ws'</span>);</span><br><span class=\"line\"><span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://localhost:2000/'</span>);</span><br><span class=\"line\">socket.on(<span class=\"string\">'open'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">    socket.send(<span class=\"string\">'你好，服务器,我是客户端'</span>);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">socket.on(<span class=\"string\">'message'</span>,<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">    <span class=\"built_in\">console</span>.log(event);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//html客户端(注:浏览器客户端与node客户端只需要一种)</span></span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    <span class=\"keyword\">var</span> socket = <span class=\"keyword\">new</span> WebSocket(<span class=\"string\">'ws://localhost:2000/'</span>);</span><br><span class=\"line\">    socket.onopen = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;;</span><br><span class=\"line\">    socket.onmessage = <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">event</span>)</span>&#123;</span><br><span class=\"line\">        <span class=\"built_in\">console</span>.log(event.data)</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2016-04-19T10:27:53.181Z","updated":"2016-04-18T07:04:54.022Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin7af7z10004rwrqeepzbvax","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"Socket.io发送消息含义","date":"2016-04-19T10:05:36.000Z","_content":"\n仅作收藏:转自博客园 若相忆;\n\n```javascript\n\n// send to current request socket client\nsocket.emit('message', \"this is a test\");\n\n// sending to all clients, include sender\nio.sockets.emit('message', \"this is a test\");\n\n// sending to all clients except sender\nsocket.broadcast.emit('message', \"this is a test\");\n\n// sending to all clients in 'game' room(channel) except sender\nsocket.broadcast.to('game').emit('message', 'nice game');\n\n// sending to all clients in 'game' room(channel), include sender\nio.sockets.in('game').emit('message', 'cool game');\n\n// sending to individual socketid\nio.sockets.socket(socketid).emit('message', 'for your eyes only');\n\n// 进入一个房间\nsocket.join('room');\n// 离开一个房间\nsocket.leave('room');\n\n```\n订阅发布模式\n\n```javascript\n\n//前端触发订阅/退订事件\nsocket.emit('subscribe',{\"room\" : \"room_name\"};\nsocket.emit('unsubscribe',{\"room\" : \"room_name\"};\n\n//后台处理订阅/退订事件\nsocket.on('subscribe', function(data) {\n    socket.join(data.room);\n})\nsocket.on('unsubscribe', function(data) {\n    socket.leave(data.room);\n})\n```\n\n####浏览器的全局属性 window.WebSocket\n![](http://images2015.cnblogs.com/blog/921378/201603/921378-20160330100043051-1238532091.jpg)","source":"_posts/Socket-io发送消息含义.md","raw":"---\ntitle: Socket.io发送消息含义\ndate: 2016-04-19 18:05:36\ntags: NodeJs\n---\n\n仅作收藏:转自博客园 若相忆;\n\n```javascript\n\n// send to current request socket client\nsocket.emit('message', \"this is a test\");\n\n// sending to all clients, include sender\nio.sockets.emit('message', \"this is a test\");\n\n// sending to all clients except sender\nsocket.broadcast.emit('message', \"this is a test\");\n\n// sending to all clients in 'game' room(channel) except sender\nsocket.broadcast.to('game').emit('message', 'nice game');\n\n// sending to all clients in 'game' room(channel), include sender\nio.sockets.in('game').emit('message', 'cool game');\n\n// sending to individual socketid\nio.sockets.socket(socketid).emit('message', 'for your eyes only');\n\n// 进入一个房间\nsocket.join('room');\n// 离开一个房间\nsocket.leave('room');\n\n```\n订阅发布模式\n\n```javascript\n\n//前端触发订阅/退订事件\nsocket.emit('subscribe',{\"room\" : \"room_name\"};\nsocket.emit('unsubscribe',{\"room\" : \"room_name\"};\n\n//后台处理订阅/退订事件\nsocket.on('subscribe', function(data) {\n    socket.join(data.room);\n})\nsocket.on('unsubscribe', function(data) {\n    socket.leave(data.room);\n})\n```\n\n####浏览器的全局属性 window.WebSocket\n![](http://images2015.cnblogs.com/blog/921378/201603/921378-20160330100043051-1238532091.jpg)","slug":"Socket-io发送消息含义","published":1,"updated":"2016-04-19T10:06:01.354Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cin7af7zh0008rwrqxvoyj0ev","content":"<p>仅作收藏:转自博客园 若相忆;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// send to current request socket client</span></span><br><span class=\"line\">socket.emit(<span class=\"string\">'message'</span>, <span class=\"string\">\"this is a test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients, include sender</span></span><br><span class=\"line\">io.sockets.emit(<span class=\"string\">'message'</span>, <span class=\"string\">\"this is a test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients except sender</span></span><br><span class=\"line\">socket.broadcast.emit(<span class=\"string\">'message'</span>, <span class=\"string\">\"this is a test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients in 'game' room(channel) except sender</span></span><br><span class=\"line\">socket.broadcast.to(<span class=\"string\">'game'</span>).emit(<span class=\"string\">'message'</span>, <span class=\"string\">'nice game'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients in 'game' room(channel), include sender</span></span><br><span class=\"line\">io.sockets.in(<span class=\"string\">'game'</span>).emit(<span class=\"string\">'message'</span>, <span class=\"string\">'cool game'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to individual socketid</span></span><br><span class=\"line\">io.sockets.socket(socketid).emit(<span class=\"string\">'message'</span>, <span class=\"string\">'for your eyes only'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进入一个房间</span></span><br><span class=\"line\">socket.join(<span class=\"string\">'room'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 离开一个房间</span></span><br><span class=\"line\">socket.leave(<span class=\"string\">'room'</span>);</span><br></pre></td></tr></table></figure>\n<p>订阅发布模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前端触发订阅/退订事件</span></span><br><span class=\"line\">socket.emit(<span class=\"string\">'subscribe'</span>,&#123;<span class=\"string\">\"room\"</span> : <span class=\"string\">\"room_name\"</span>&#125;;</span><br><span class=\"line\">socket.emit(<span class=\"string\">'unsubscribe'</span>,&#123;<span class=\"string\">\"room\"</span> : <span class=\"string\">\"room_name\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后台处理订阅/退订事件</span></span><br><span class=\"line\">socket.on(<span class=\"string\">'subscribe'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    socket.join(data.room);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">socket.on(<span class=\"string\">'unsubscribe'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    socket.leave(data.room);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>####浏览器的全局属性 window.WebSocket<br><img src=\"http://images2015.cnblogs.com/blog/921378/201603/921378-20160330100043051-1238532091.jpg\" alt=\"\"></p>\n","excerpt":"","more":"<p>仅作收藏:转自博客园 若相忆;</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// send to current request socket client</span></span><br><span class=\"line\">socket.emit(<span class=\"string\">'message'</span>, <span class=\"string\">\"this is a test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients, include sender</span></span><br><span class=\"line\">io.sockets.emit(<span class=\"string\">'message'</span>, <span class=\"string\">\"this is a test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients except sender</span></span><br><span class=\"line\">socket.broadcast.emit(<span class=\"string\">'message'</span>, <span class=\"string\">\"this is a test\"</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients in 'game' room(channel) except sender</span></span><br><span class=\"line\">socket.broadcast.to(<span class=\"string\">'game'</span>).emit(<span class=\"string\">'message'</span>, <span class=\"string\">'nice game'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to all clients in 'game' room(channel), include sender</span></span><br><span class=\"line\">io.sockets.in(<span class=\"string\">'game'</span>).emit(<span class=\"string\">'message'</span>, <span class=\"string\">'cool game'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// sending to individual socketid</span></span><br><span class=\"line\">io.sockets.socket(socketid).emit(<span class=\"string\">'message'</span>, <span class=\"string\">'for your eyes only'</span>);</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">// 进入一个房间</span></span><br><span class=\"line\">socket.join(<span class=\"string\">'room'</span>);</span><br><span class=\"line\"><span class=\"comment\">// 离开一个房间</span></span><br><span class=\"line\">socket.leave(<span class=\"string\">'room'</span>);</span><br></pre></td></tr></table></figure>\n<p>订阅发布模式</p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//前端触发订阅/退订事件</span></span><br><span class=\"line\">socket.emit(<span class=\"string\">'subscribe'</span>,&#123;<span class=\"string\">\"room\"</span> : <span class=\"string\">\"room_name\"</span>&#125;;</span><br><span class=\"line\">socket.emit(<span class=\"string\">'unsubscribe'</span>,&#123;<span class=\"string\">\"room\"</span> : <span class=\"string\">\"room_name\"</span>&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">//后台处理订阅/退订事件</span></span><br><span class=\"line\">socket.on(<span class=\"string\">'subscribe'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    socket.join(data.room);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">socket.on(<span class=\"string\">'unsubscribe'</span>, <span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">    socket.leave(data.room);</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n<p>####浏览器的全局属性 window.WebSocket<br><img src=\"http://images2015.cnblogs.com/blog/921378/201603/921378-20160330100043051-1238532091.jpg\" alt=\"\"></p>\n"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cin7af7yl0000rwrqz80nn18e","tag_id":"cin7af7z10003rwrqqmqd4yhz","_id":"cin7af7zh0006rwrqydfzb9q1"},{"post_id":"cin7af7z10002rwrq5ubhvh6p","tag_id":"cin7af7zh0005rwrqjgw0r119","_id":"cin7af7zh0007rwrqji90q92x"},{"post_id":"cin7af7zh0008rwrqxvoyj0ev","tag_id":"cin7af7zh0005rwrqjgw0r119","_id":"cin7af7zh000arwrqmuu2jhbl"}],"Tag":[{"name":"JavaScript","_id":"cin7af7z10003rwrqqmqd4yhz"},{"name":"NodeJs","_id":"cin7af7zh0005rwrqjgw0r119"}]}}